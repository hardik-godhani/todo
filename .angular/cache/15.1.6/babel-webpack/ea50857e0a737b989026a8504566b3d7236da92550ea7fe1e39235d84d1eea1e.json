{"ast":null,"code":"import { Note } from 'src/app/core/model/note';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"../note/note.component\";\nfunction HeroPageComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"app-note\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const note_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"note\", note_r1);\n  }\n}\nexport class HeroPageComponent {\n  constructor() {\n    this.notes = [];\n  }\n  addNotes(id = '') {\n    let newGroup = new Note();\n    this.notes.push(newGroup);\n  }\n  removeNote(i) {\n    this.notes.splice(i, 1);\n  }\n  updateList() {}\n}\nHeroPageComponent.ɵfac = function HeroPageComponent_Factory(t) {\n  return new (t || HeroPageComponent)();\n};\nHeroPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HeroPageComponent,\n  selectors: [[\"app-hero-page\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"note-wrapper\"], [1, \"btn-wrapper\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"add-notes\", 3, \"click\"], [\"class\", \"note-container\", 4, \"ngFor\", \"ngForOf\"], [1, \"note-container\"], [3, \"note\"]],\n  template: function HeroPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function HeroPageComponent_Template_button_click_2_listener() {\n        return ctx.addNotes();\n      });\n      i0.ɵɵtext(3, \" Add Note \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(4, HeroPageComponent_div_4_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.notes);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.MatButton, i3.NoteComponent],\n  styles: [\".note-wrapper[_ngcontent-%COMP%], .note-container[_ngcontent-%COMP%] {\\n  max-width: 920px;\\n  margin-top: 10px;\\n  margin: 0 auto;\\n}\\n\\n.note-wrapper[_ngcontent-%COMP%] {\\n  padding: 10px;\\n}\\n\\n.btn-wrapper[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  margin-top: 10px;\\n}\\n\\n.note-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 10px;\\n  margin-top: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvaGVyby1wYWdlL2hlcm8tcGFnZS9oZXJvLXBhZ2UuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7QUFDRjs7QUFDQTtFQUNFLGFBQUE7QUFFRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSw4QkFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsZUFBQTtFQUNBLFNBQUE7RUFFQSxnQkFBQTtBQUFGIiwic291cmNlc0NvbnRlbnQiOlsiLm5vdGUtd3JhcHBlcixcclxuLm5vdGUtY29udGFpbmVyIHtcclxuICBtYXgtd2lkdGg6IDkyMHB4O1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbn1cclxuLm5vdGUtd3JhcHBlciB7XHJcbiAgcGFkZGluZzogMTBweDtcclxufVxyXG5cclxuXHJcbi5idG4td3JhcHBlciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuLm5vdGUtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtd3JhcDogd3JhcDtcclxuICBnYXA6IDEwcHg7XHJcblxyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,yBAAyB;;;;;;;ICsB5CC,8BAAsE;IACpEA,8BAAmC;IACrCA,iBAAM;;;;IADMA,eAAa;IAAbA,8BAAa;;;ADjB3B,OAAM,MAAOC,iBAAiB;EAG5BC;IAFA,UAAK,GAAW,EAAE;EAGlB;EAEAC,QAAQ,CAACC,EAAE,GAAG,EAAE;IACd,IAAIC,QAAQ,GAAG,IAAIN,IAAI,EAAE;IACzB,IAAI,CAACO,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC3B;EAEAG,UAAU,CAACC,CAAS;IAClB,IAAI,CAACH,KAAK,CAACI,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;EACzB;EAEAE,UAAU,IAEV;;AAjBWV,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP9BhB,8BAA0B;MAEsCA;QAAA,OAASiB,cAAU;MAAA,EAAC;MAC9EjB,0BACF;MAAAA,iBAAS;MAmBXA,kEAEM;MACRA,iBAAM;;;MAHyCA,eAAU;MAAVA,mCAAU","names":["Note","i0","HeroPageComponent","constructor","addNotes","id","newGroup","notes","push","removeNote","i","splice","updateList","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\pages\\hero-page\\hero-page\\hero-page.component.ts","C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\pages\\hero-page\\hero-page\\hero-page.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Note } from 'src/app/core/model/note';\r\n@Component({\r\n  selector: 'app-hero-page',\r\n  templateUrl: './hero-page.component.html',\r\n  styleUrls: ['./hero-page.component.scss'],\r\n})\r\nexport class HeroPageComponent {\r\n  notes: Note[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  addNotes(id = '') {\r\n    let newGroup = new Note();\r\n    this.notes.push(newGroup);\r\n  }\r\n\r\n  removeNote(i: number) {\r\n    this.notes.splice(i, 1);\r\n  }\r\n\r\n  updateList() {\r\n\r\n  }\r\n}\r\n","<div class=\"note-wrapper\">\r\n  <div class=\"btn-wrapper\">\r\n    <button mat-raised-button class=\"add-notes\" color=\"primary\" (click)=\"addNotes()\">\r\n      Add Note\r\n    </button>\r\n  </div>\r\n  <!-- <form class=\"note-container\" [formGroup]=\"notesForm\">\r\n    <ng-container formArrayName=\"notes\">\r\n      <ng-container *ngFor=\"let note of notes.controls; let i = index\">\r\n        <div class=\"single-note\" [formGroupName]=\"i\">\r\n          <div class=\"title-div\">\r\n            <input type=\"text\" formControlName=\"title\" placeholder=\"Title...\">\r\n            <span class=\"close-icon\" (click)=\"removeNote(i)\">\r\n              <mat-icon>close</mat-icon>\r\n            </span>\r\n          </div>\r\n          <app-note [id]=\"'editor' + i\" [form]=\"notesForm.get('notes')['controls'][i].get('note')\"></app-note>\r\n          <span class=\"save-btn\"> </span>\r\n        </div>\r\n      </ng-container>\r\n    </ng-container>\r\n  </form> -->\r\n\r\n  <div class=\"note-container\" *ngFor=\"let note of notes; let i = index\">\r\n    <app-note [note]=\"note\"></app-note>\r\n  </div>\r\n</div>\r\n\r\n<!-- This is the code for saving all notes at a time -->\r\n\r\n<!-- <div class=\"note-wrapper\">\r\n  <div class=\"btn-wrapper\">\r\n    <button mat-raised-button class=\"add-notes\" color=\"primary\" (click)=\"addNotes()\">\r\n      Add Note\r\n    </button>\r\n    <span class=\"save-btn\" *ngIf=\"notes.controls.length > 0\">\r\n      <button mat-raised-button color=\"primary\" type=\"button\" (click)=\"submit()\">\r\n        Save\r\n      </button>\r\n    </span>\r\n  </div>\r\n  <form class=\"note-container\" [formGroup]=\"notesForm\">\r\n    <ng-container formArrayName=\"notes\">\r\n      <ng-container *ngFor=\"let note of notes.controls; let i = index\">\r\n        <div class=\"single-note\" [formGroupName]=\"i\">\r\n          <div class=\"title-div\">\r\n            <input type=\"text\" formControlName=\"title\" placeholder=\"Title...\">\r\n            <span class=\"close-icon\" (click)=\"removeNote(i)\">\r\n              <mat-icon>close</mat-icon>\r\n            </span>\r\n          </div>\r\n          <app-note [id]=\"'editor' + i\" [form]=\"notesForm.get('notes')['controls'][i].get('note')\"></app-note>\r\n          <span class=\"save-btn\"> </span>\r\n        </div>\r\n      </ng-container>\r\n    </ng-container>\r\n  </form>\r\n</div> -->\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}