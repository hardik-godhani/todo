{"ast":null,"code":"import { UserLogin } from './../../../core/model/user-login';\nimport { Validators } from '@angular/forms';\nimport { ApiStatus } from 'src/app/core/enums/enums';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/core/services/auth.service\";\nimport * as i3 from \"src/app/core/services/local-storage.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nfunction LogInComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"User Name is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LogInComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid username address \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LogInComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LogInComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please input atleast 3 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LogInComponent {\n  constructor(formBuilder, authService, localStorageService, route) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.localStorageService = localStorageService;\n    this.route = route;\n    this.createForm();\n  }\n  ngOnInit() {\n    if (this.localStorageService.isLoggedIn()) {\n      this.route.navigate(['']);\n    }\n  }\n  createForm() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n  submitForm() {\n    if (this.authService.requestedUrl == '/login') this.authService.requestedUrl = '';\n    if (this.loginForm.invalid) {\n      for (const i in this.loginForm.controls) {\n        this.loginForm.controls[i].markAsDirty();\n        this.loginForm.controls[i].updateValueAndValidity();\n      }\n      return;\n    }\n    let model = new UserLogin();\n    model.username = this.val['username'].value;\n    model.password = this.val['password'].value;\n    this.authService.login(model).subscribe(res => {\n      if (res.status == ApiStatus.SUCCESS) {\n        if (res.data && res.data.isDeleted == false) {\n          this.localStorageService.setUser(res.data);\n          if (this.authService.requestedUrl) {\n            this.route.navigate([this.authService.requestedUrl]);\n          } else {\n            this.route.navigate(['']);\n          }\n          this.loginForm.reset();\n        }\n      }\n    }, err => {\n      console.log(err);\n    });\n  }\n  get val() {\n    return this.loginForm.controls;\n  }\n}\nLogInComponent.ɵfac = function LogInComponent_Factory(t) {\n  return new (t || LogInComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.LocalStorageService), i0.ɵɵdirectiveInject(i4.Router));\n};\nLogInComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LogInComponent,\n  selectors: [[\"app-log-in\"]],\n  decls: 26,\n  vars: 5,\n  consts: [[1, \"main-container\"], [1, \"box\"], [\"id\", \"loginForm\", 1, \"login-form\", 3, \"formGroup\"], [1, \"input-box\"], [\"floatLabel\", \"auto\", \"appearance\", \"outline\"], [\"type\", \"text\", \"id\", \"username\", \"matInput\", \"\", \"formControlName\", \"username\", \"placeholder\", \"Ex. pat@example.com\", \"autocomplete\", \"disabled\"], [4, \"ngIf\"], [\"type\", \"password\", \"id\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\", \"autocomplete\", \"disabled\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", \"color\", \"primary\", 1, \"w-100\", 3, \"click\"], [\"routerLink\", \"/register\", 1, \"pointer\"]],\n  template: function LogInComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"TODO Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2)(5, \"div\", 3)(6, \"mat-form-field\", 4)(7, \"mat-label\");\n      i0.ɵɵtext(8, \"User Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 5);\n      i0.ɵɵtemplate(10, LogInComponent_mat_error_10_Template, 4, 0, \"mat-error\", 6);\n      i0.ɵɵtemplate(11, LogInComponent_mat_error_11_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 3)(13, \"mat-form-field\", 4)(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 7);\n      i0.ɵɵtemplate(17, LogInComponent_mat_error_17_Template, 4, 0, \"mat-error\", 6);\n      i0.ɵɵtemplate(18, LogInComponent_mat_error_18_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\")(20, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function LogInComponent_Template_button_click_20_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵtext(21, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"p\");\n      i0.ɵɵtext(23, \" Don't have an account ? \");\n      i0.ɵɵelementStart(24, \"span\", 9);\n      i0.ɵɵtext(25, \"Register\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.val == null ? null : ctx.val[\"username\"] == null ? null : ctx.val[\"username\"].errors == null ? null : ctx.val[\"username\"].errors[\"required\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.val == null ? null : ctx.val[\"username\"] == null ? null : ctx.val[\"username\"].errors == null ? null : ctx.val[\"username\"].errors[\"username\"]) && !(ctx.val == null ? null : ctx.val[\"username\"] == null ? null : ctx.val[\"username\"].errors == null ? null : ctx.val[\"username\"].errors[\"required\"]));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.val == null ? null : ctx.val[\"password\"] == null ? null : ctx.val[\"password\"].errors == null ? null : ctx.val[\"password\"].errors[\"required\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.val == null ? null : ctx.val[\"password\"] == null ? null : ctx.val[\"password\"].errors == null ? null : ctx.val[\"password\"].errors[\"required\"]));\n    }\n  },\n  dependencies: [i5.NgIf, i4.RouterLink, i6.MatFormField, i6.MatLabel, i6.MatError, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i7.MatInput, i8.MatButton, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".pointer[_ngcontent-%COMP%] {\\n  color: #3f51b5;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9sb2ctaW4vbG9nLWluL2xvZy1pbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5wb2ludGVye1xyXG4gIGNvbG9yOiAjM2Y1MWI1O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["UserLogin","Validators","ApiStatus","i0","LogInComponent","constructor","formBuilder","authService","localStorageService","route","createForm","ngOnInit","isLoggedIn","navigate","loginForm","group","username","required","password","submitForm","requestedUrl","invalid","i","controls","markAsDirty","updateValueAndValidity","model","val","value","login","subscribe","res","status","SUCCESS","data","isDeleted","setUser","reset","err","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\auth\\log-in\\log-in\\log-in.component.ts","C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\auth\\log-in\\log-in\\log-in.component.html"],"sourcesContent":["import { ApiResponse, UserLogin } from './../../../core/model/user-login';\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { LocalStorageService } from 'src/app/core/services/local-storage.service';\r\nimport { ApiStatus } from 'src/app/core/enums/enums';\r\n\r\n@Component({\r\n  selector: 'app-log-in',\r\n  templateUrl: './log-in.component.html',\r\n  styleUrls: ['./log-in.component.scss'],\r\n})\r\nexport class LogInComponent {\r\n  loginForm: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private localStorageService: LocalStorageService,\r\n    private route: Router\r\n  ) {\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.localStorageService.isLoggedIn()) {\r\n      this.route.navigate(['']);\r\n    }\r\n  }\r\n\r\n  createForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', [Validators.required]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    if (this.authService.requestedUrl == '/login')\r\n      this.authService.requestedUrl = '';\r\n    if (this.loginForm.invalid) {\r\n      for (const i in this.loginForm.controls) {\r\n        this.loginForm.controls[i].markAsDirty();\r\n        this.loginForm.controls[i].updateValueAndValidity();\r\n      }\r\n      return;\r\n    }\r\n\r\n    let model: UserLogin = new UserLogin();\r\n    model.username = this.val['username'].value;\r\n    model.password = this.val['password'].value;\r\n\r\n    this.authService.login(model).subscribe(\r\n      (res: ApiResponse) => {\r\n        if (res.status == ApiStatus.SUCCESS) {\r\n          if (res.data && res.data.isDeleted == false) {\r\n            this.localStorageService.setUser(res.data);\r\n            if (this.authService.requestedUrl) {\r\n              this.route.navigate([this.authService.requestedUrl]);\r\n            } else {\r\n              this.route.navigate(['']);\r\n            }\r\n            this.loginForm.reset();\r\n          }\r\n        }\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  get val() {\r\n    return this.loginForm.controls;\r\n  }\r\n}\r\n","<div class=\"main-container\">\r\n  <div class=\"box\">\r\n    <h2>TODO Login</h2>\r\n\r\n    <form [formGroup]=\"loginForm\" id=\"loginForm\" class=\"login-form\">\r\n      <div class=\"input-box\">\r\n        <mat-form-field floatLabel=\"auto\" appearance=\"outline\">\r\n          <mat-label>User Name</mat-label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            matInput\r\n            formControlName=\"username\"\r\n            placeholder=\"Ex. pat@example.com\"\r\n            autocomplete=\"disabled\"\r\n          />\r\n          <mat-error *ngIf=\"val?.['username']?.errors?.['required']\"\r\n            >User Name is <strong>required</strong>\r\n          </mat-error>\r\n          <mat-error\r\n            *ngIf=\"\r\n            val?.['username']?.errors?.['username'] && !val?.['username']?.errors?.['required']\r\n          \"\r\n          >\r\n            Please enter a valid username address\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"input-box\">\r\n        <mat-form-field floatLabel=\"auto\" appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            matInput\r\n            formControlName=\"password\"\r\n            autocomplete=\"disabled\"\r\n          />\r\n          <mat-error *ngIf=\"val?.['password']?.errors?.['required']\"\r\n            >Password is <strong>required</strong></mat-error\r\n          >\r\n          <mat-error\r\n            *ngIf=\"\r\n             !val?.['password']?.errors?.['required']\r\n          \"\r\n          >\r\n            Please input atleast 3 characters\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div>\r\n        <button\r\n          mat-raised-button\r\n          type=\"submit\"\r\n          (click)=\"submitForm()\"\r\n          color=\"primary\"\r\n          class=\"w-100\"\r\n        >\r\n          Login\r\n        </button>\r\n        <p>\r\n          Don't have an account ?\r\n          <span routerLink=\"/register\" class=\"pointer\">Register</span>\r\n        </p>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}