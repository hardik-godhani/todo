{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.requestedUrl = '/login';\n    this.authTokenStale = 'stale_auth_token';\n    this.authTokenNew = 'new_auth_token';\n    this.newToken = ' ';\n    this.refresh_token = localStorage.getItem('environment.dataKey');\n    this.currentToken = this.authTokenStale;\n  }\n  getAuthToken() {\n    let data = localStorage.getItem(environment.dataKey);\n    if (data) {\n      data = JSON.parse(atob(data));\n      this.currentToken = data;\n    }\n    return this.currentToken;\n  }\n  login(model) {\n    return this.http.post(`${environment.baseUrl}/auth/login`, model);\n  }\n  createUser(model) {\n    return this.http.post(`${environment.baseUrl}/auth/api/v1/user/authenticate`, model);\n  }\n  // refreshToken() {\n  //   return this.http.get(`${environment.baseUrl}/auth/api/v1/user/refreshtoken`);\n  // }\n  logout() {\n    localStorage.clear();\n    this.route.navigate(['/login']);\n  }\n  getDecodedAccessToken(data) {\n    try {\n      return data;\n    } catch (Error) {\n      return null;\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;;;;AAM1D,OAAM,MAAOC,WAAW;EAWtBC,YAAoBC,IAAgB,EAAUC,KAAa;IAAvC,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IAVnD,iBAAY,GAAG,QAAQ;IAEhB,mBAAc,GAAW,kBAAkB;IAC3C,iBAAY,GAAW,gBAAgB;IAGtC,aAAQ,GAAG,GAAG;IAEd,kBAAa,GAAWC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;IAGzE,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,cAAc;EACzC;EAEAC,YAAY;IACV,IAAIC,IAAI,GAAQL,YAAY,CAACC,OAAO,CAACN,WAAW,CAACW,OAAO,CAAC;IACzD,IAAID,IAAI,EAAE;MACRA,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,IAAI,CAAC,CAAC;MAC7B,IAAI,CAACH,YAAY,GAAGG,IAAI;;IAE1B,OAAO,IAAI,CAACH,YAAY;EAC1B;EAEAQ,KAAK,CAACC,KAAK;IACT,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,GAAGjB,WAAW,CAACkB,OAAO,aAAa,EAAEF,KAAK,CAAC;EACnE;EAEAG,UAAU,CAACH,KAAK;IACd,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CACnB,GAAGjB,WAAW,CAACkB,OAAO,gCAAgC,EACtDF,KAAK,CACN;EACH;EAEA;EACA;EACA;EAEAI,MAAM;IACJf,YAAY,CAACgB,KAAK,EAAE;IACpB,IAAI,CAACjB,KAAK,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACjC;EAEAC,qBAAqB,CAACb,IAAY;IAChC,IAAI;MACF,OAAOA,IAAI;KACZ,CAAC,OAAOc,KAAK,EAAE;MACd,OAAO,IAAI;;EAEf;;AAlDWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["environment","AuthService","constructor","http","route","localStorage","getItem","currentToken","authTokenStale","getAuthToken","data","dataKey","JSON","parse","atob","login","model","post","baseUrl","createUser","logout","clear","navigate","getDecodedAccessToken","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  requestedUrl = '/login';\r\n\r\n  public authTokenStale: string = 'stale_auth_token';\r\n  public authTokenNew: string = 'new_auth_token';\r\n  public currentToken: string;\r\n\r\n  private newToken = ' ';\r\n  private current_token: string;\r\n  private refresh_token: string = localStorage.getItem('environment.dataKey');\r\n\r\n  constructor(private http: HttpClient, private route: Router) {\r\n    this.currentToken = this.authTokenStale;\r\n  }\r\n\r\n  getAuthToken() {\r\n    let data: any = localStorage.getItem(environment.dataKey);\r\n    if (data) {\r\n      data = JSON.parse(atob(data));\r\n      this.currentToken = data;\r\n    }\r\n    return this.currentToken;\r\n  }\r\n\r\n  login(model) {\r\n    return this.http.post(`${environment.baseUrl}/auth/login`, model);\r\n  }\r\n\r\n  createUser(model) {\r\n    return this.http.post(\r\n      `${environment.baseUrl}/auth/api/v1/user/authenticate`,\r\n      model\r\n    );\r\n  }\r\n\r\n  // refreshToken() {\r\n  //   return this.http.get(`${environment.baseUrl}/auth/api/v1/user/refreshtoken`);\r\n  // }\r\n\r\n  logout() {\r\n    localStorage.clear();\r\n    this.route.navigate(['/login']);\r\n  }\r\n\r\n  getDecodedAccessToken(data: string): any {\r\n    try {\r\n      return data;\r\n    } catch (Error) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}