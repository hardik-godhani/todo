{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class RegisterService {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.requestedUrl = 'api/v1/user';\n    this.authTokenStale = 'stale_auth_token';\n    this.authTokenNew = 'new_auth_token';\n    this.currentToken = this.authTokenStale;\n  }\n  getAuthToken() {\n    let data = localStorage.getItem(environment.dataKey);\n    if (data) {\n      data = JSON.parse(atob(data));\n      this.currentToken = data;\n    }\n    return this.currentToken;\n  }\n  createUser(model) {\n    return this.http.post(`${environment.baseUrl}/api/v1/user/create`, model);\n  }\n  logout() {\n    localStorage.clear();\n    this.route.navigate(['/login']);\n  }\n}\nRegisterService.ɵfac = function RegisterService_Factory(t) {\n  return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nRegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegisterService,\n  factory: RegisterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;;;;AAO1D,OAAM,MAAOC,eAAe;EAO1BC,YAAoBC,IAAgB,EAAUC,KAAa;IAAvC,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IANnD,iBAAY,GAAG,aAAa;IAErB,mBAAc,GAAW,kBAAkB;IAC3C,iBAAY,GAAW,gBAAgB;IAI5C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,cAAc;EACzC;EAEAC,YAAY;IACV,IAAIC,IAAI,GAAQC,YAAY,CAACC,OAAO,CAACV,WAAW,CAACW,OAAO,CAAC;IACzD,IAAIH,IAAI,EAAE;MACRA,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,IAAI,CAAC,CAAC;MAC7B,IAAI,CAACH,YAAY,GAAGG,IAAI;;IAE1B,OAAO,IAAI,CAACH,YAAY;EAC1B;EAEAU,UAAU,CAACC,KAAK;IACd,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,GAAGjB,WAAW,CAACkB,OAAO,qBAAqB,EAAEF,KAAK,CAAC;EAC3E;EAEAG,MAAM;IACJV,YAAY,CAACW,KAAK,EAAE;IACpB,IAAI,CAAChB,KAAK,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACjC;;AA3BWpB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAqB,SAAfrB,eAAe;EAAAsB,YAFd;AAAM","names":["environment","RegisterService","constructor","http","route","currentToken","authTokenStale","getAuthToken","data","localStorage","getItem","dataKey","JSON","parse","atob","createUser","model","post","baseUrl","logout","clear","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\core\\services\\register.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Router } from '@angular/router';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RegisterService {\r\n  requestedUrl = 'api/v1/user';\r\n\r\n  public authTokenStale: string = 'stale_auth_token';\r\n  public authTokenNew: string = 'new_auth_token';\r\n  public currentToken: string;\r\n\r\n  constructor(private http: HttpClient, private route: Router) {\r\n    this.currentToken = this.authTokenStale;\r\n  }\r\n\r\n  getAuthToken() {\r\n    let data: any = localStorage.getItem(environment.dataKey);\r\n    if (data) {\r\n      data = JSON.parse(atob(data));\r\n      this.currentToken = data;\r\n    }\r\n    return this.currentToken;\r\n  }\r\n\r\n  createUser(model) {\r\n    return this.http.post(`${environment.baseUrl}/api/v1/user/create`, model);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.clear();\r\n    this.route.navigate(['/login']);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}