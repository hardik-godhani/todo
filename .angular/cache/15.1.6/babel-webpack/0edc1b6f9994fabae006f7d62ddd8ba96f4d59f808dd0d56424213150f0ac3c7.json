{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { ApiStatus } from '../enums/enums';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/local-storage.service\";\nimport * as i2 from \"@angular/router\";\nexport class HttpConfigInterceptor {\n  constructor(localStorageService,\n  // private toastService: ToastService,\n  router) {\n    this.localStorageService = localStorageService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    let headers = req.headers;\n    let data = this.localStorageService.getUser();\n    if (data && data.token) {\n      headers = headers.set('Authorization', 'Bearer ' + data.token);\n    }\n    const clonedRequest = req.clone({\n      headers\n    });\n    debugger;\n    let showSpinner = true;\n    if (showSpinner) {\n      return next.handle(clonedRequest).pipe(retry(1), catchError(error => {\n        if (error.error.status == ApiStatus.UNAUTHORIZED) {\n          this.localStorageService.logout();\n          this.router.navigate(['/login']);\n        }\n        if (error instanceof HttpErrorResponse) {\n          // this.toastService.errorMsg(error);\n        }\n        return of(error.error);\n      }));\n    } else {\n      return next.handle(clonedRequest).pipe(retry(1), catchError(error => {\n        if (error.error.status == ApiStatus.UNAUTHORIZED) {\n          this.localStorageService.logout();\n          this.router.navigate(['/login']);\n        }\n        if (error instanceof HttpErrorResponse) {\n          // this.toastService.errorMsg(error);\n        }\n        return of(error.error);\n      }));\n    }\n  }\n}\nHttpConfigInterceptor.ɵfac = function HttpConfigInterceptor_Factory(t) {\n  return new (t || HttpConfigInterceptor)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.Router));\n};\nHttpConfigInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpConfigInterceptor,\n  factory: HttpConfigInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAKEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,EAAE,QAAsB,MAAM;AAEnD,SAASC,UAAU,EAAYC,KAAK,QAAQ,gBAAgB;AAI5D,SAASC,SAAS,QAAQ,gBAAgB;;;;AAI1C,OAAM,MAAOC,qBAAqB;EAGhCC,YACUC,mBAAwC;EAChD;EACQC,MAAc;IAFd,wBAAmB,GAAnBD,mBAAmB;IAEnB,WAAM,GAANC,MAAM;EACb;EAEHC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,IAAIC,OAAO,GAAGF,GAAG,CAACE,OAAO;IACzB,IAAIC,IAAI,GAAQ,IAAI,CAACN,mBAAmB,CAACO,OAAO,EAAE;IAClD,IAAID,IAAI,IAAIA,IAAI,CAACE,KAAK,EAAE;MACtBH,OAAO,GAAGA,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGH,IAAI,CAACE,KAAK,CAAC;;IAEhE,MAAME,aAAa,GAAGP,GAAG,CAACQ,KAAK,CAAC;MAAEN;IAAO,CAAE,CAAC;IAC5C;IAEA,IAAIO,WAAW,GAAG,IAAI;IACtB,IAAIA,WAAW,EAAE;MACf,OAAOR,IAAI,CAACS,MAAM,CAACH,aAAa,CAAC,CAACI,IAAI,CACpClB,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAEoB,KAAK,IAAI;QACnB,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAM,IAAInB,SAAS,CAACoB,YAAY,EAAE;UAChD,IAAI,CAACjB,mBAAmB,CAACkB,MAAM,EAAE;UACjC,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;QAElC,IAAIJ,KAAK,YAAYtB,iBAAiB,EAAE;UACtC;QAAA;QAGF,OAAOC,EAAE,CAACqB,KAAK,CAACA,KAAK,CAAC;MACxB,CAAC,CAAC,CACH;KACF,MAAM;MACL,OAAOX,IAAI,CAACS,MAAM,CAACH,aAAa,CAAC,CAACI,IAAI,CACpClB,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAEoB,KAAK,IAAI;QACnB,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAM,IAAInB,SAAS,CAACoB,YAAY,EAAE;UAChD,IAAI,CAACjB,mBAAmB,CAACkB,MAAM,EAAE;UACjC,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;QAElC,IAAIJ,KAAK,YAAYtB,iBAAiB,EAAE;UACtC;QAAA;QAGF,OAAOC,EAAE,CAACqB,KAAK,CAACA,KAAK,CAAC;MACxB,CAAC,CAAC,CACH;;EAEL;;AArDWjB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAsB,SAArBtB,qBAAqB;AAAA","names":["HttpErrorResponse","of","catchError","retry","ApiStatus","HttpConfigInterceptor","constructor","localStorageService","router","intercept","req","next","headers","data","getUser","token","set","clonedRequest","clone","showSpinner","handle","pipe","error","status","UNAUTHORIZED","logout","navigate","factory"],"sourceRoot":"","sources":["C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\core\\interceptor\\Interceptors.ts"],"sourcesContent":["import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, finalize, retry } from 'rxjs/operators';\r\nimport { LocalStorageService } from '../services/local-storage.service';\r\n\r\nimport { Router } from '@angular/router';\r\nimport { ApiStatus } from '../enums/enums';\r\nimport { ToastService } from '../services/toast.service';\r\n\r\n@Injectable()\r\nexport class HttpConfigInterceptor implements HttpInterceptor {\r\n  req: any;\r\n  next: any;\r\n  constructor(\r\n    private localStorageService: LocalStorageService,\r\n    // private toastService: ToastService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    let headers = req.headers;\r\n    let data: any = this.localStorageService.getUser();\r\n    if (data && data.token) {\r\n      headers = headers.set('Authorization', 'Bearer ' + data.token);\r\n    }\r\n    const clonedRequest = req.clone({ headers });\r\n    debugger;\r\n\r\n    let showSpinner = true;\r\n    if (showSpinner) {\r\n      return next.handle(clonedRequest).pipe(\r\n        retry(1),\r\n        catchError((error) => {\r\n          if (error.error.status == ApiStatus.UNAUTHORIZED) {\r\n            this.localStorageService.logout();\r\n            this.router.navigate(['/login']);\r\n          }\r\n          if (error instanceof HttpErrorResponse) {\r\n            // this.toastService.errorMsg(error);\r\n          }\r\n\r\n          return of(error.error);\r\n        })\r\n      );\r\n    } else {\r\n      return next.handle(clonedRequest).pipe(\r\n        retry(1),\r\n        catchError((error) => {\r\n          if (error.error.status == ApiStatus.UNAUTHORIZED) {\r\n            this.localStorageService.logout();\r\n            this.router.navigate(['/login']);\r\n          }\r\n          if (error instanceof HttpErrorResponse) {\r\n            // this.toastService.errorMsg(error);\r\n          }\r\n\r\n          return of(error.error);\r\n        })\r\n      );\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}