{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/core/services/note.service\";\nimport * as i3 from \"@kolkov/angular-editor\";\nimport * as i4 from \"@angular/material/icon\";\nexport class NoteComponent {\n  constructor(fb, noteService) {\n    this.fb = fb;\n    this.noteService = noteService;\n    this.editorConfig = {\n      editable: true,\n      spellcheck: true,\n      height: '15rem',\n      minHeight: '3rem',\n      placeholder: 'Enter your notes here...',\n      translate: 'no',\n      width: '100%',\n      toolbarPosition: 'bottom',\n      outline: false,\n      showToolbar: true,\n      uploadWithCredentials: false,\n      customClasses: [{\n        name: 'quote',\n        class: 'quote'\n      }, {\n        name: 'redText',\n        class: 'redText'\n      }, {\n        name: 'titleText',\n        class: 'titleText',\n        tag: 'h1'\n      }]\n    };\n  }\n  ngOnInit() {\n    this.creteForm();\n  }\n  creteForm() {\n    this.form = this.fb.group({\n      id: [this.note.id, [Validators.required]],\n      title: [this.note.title, [Validators.required]],\n      description: [this.note.description, [Validators.required]]\n    });\n  }\n  removeNote() {}\n  saveNote() {\n    debugger;\n    this.noteService.updateNote(this.note).subscribe(resp => {\n      if (resp && resp.status == 'SUCCESS' && resp.data && resp.data.data) {\n        // this.note = resp.data.data;\n        debugger;\n      }\n    });\n  }\n}\nNoteComponent.ɵfac = function NoteComponent_Factory(t) {\n  return new (t || NoteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.NoteService));\n};\nNoteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NoteComponent,\n  selectors: [[\"app-note\"]],\n  inputs: {\n    note: \"note\"\n  },\n  decls: 12,\n  vars: 3,\n  consts: [[3, \"formGroup\"], [1, \"single-note\"], [1, \"title-div\"], [\"type\", \"text\", \"formControlName\", \"title\", \"placeholder\", \"Title...\"], [1, \"save-icon\", 3, \"click\"], [1, \"close-icon\", 3, \"click\"], [\"formControlName\", \"description\", 3, \"id\", \"config\"], [1, \"save-btn\"]],\n  template: function NoteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"input\", 3);\n      i0.ɵɵelementStart(4, \"span\", 4);\n      i0.ɵɵlistener(\"click\", function NoteComponent_Template_span_click_4_listener() {\n        return ctx.saveNote();\n      });\n      i0.ɵɵelementStart(5, \"mat-icon\");\n      i0.ɵɵtext(6, \"save\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"span\", 5);\n      i0.ɵɵlistener(\"click\", function NoteComponent_Template_span_click_7_listener() {\n        return ctx.removeNote();\n      });\n      i0.ɵɵelementStart(8, \"mat-icon\");\n      i0.ɵɵtext(9, \"close\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(10, \"angular-editor\", 6)(11, \"span\", 7);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"id\", ctx.note == null ? null : ctx.note.id == null ? null : ctx.note.id.toString())(\"config\", ctx.editorConfig);\n    }\n  },\n  dependencies: [i3.AngularEditorComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i4.MatIcon, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".note-wrapper[_ngcontent-%COMP%], .note-container[_ngcontent-%COMP%] {\\n  max-width: 920px;\\n  margin-top: 10px;\\n  margin: 0 auto;\\n}\\n\\n.close-icon[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  position: absolute;\\n  right: 5px;\\n  top: 10px;\\n  z-index: 5;\\n  cursor: pointer;\\n}\\n\\n.save-icon[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  position: absolute;\\n  right: 40px;\\n  top: 10px;\\n  z-index: 5;\\n  cursor: pointer;\\n}\\n\\n.title-div[_ngcontent-%COMP%] {\\n  padding: 4px;\\n  padding-top: 10px;\\n}\\n.title-div[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  padding-left: 10px;\\n  font-size: 20px;\\n  outline: none;\\n  border: none;\\n  width: 78%;\\n}\\n\\n[_nghost-%COMP%]     .angular-editor-textarea, [_nghost-%COMP%]     .angular-editor-toolbar.ng-star-inserted {\\n  border: none !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvaGVyby1wYWdlL25vdGUvbm90ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7RUFFRSxnQkFBQTtFQUNBLGdCQUFBO0VBQ0EsY0FBQTtBQUNGOztBQUVBO0VBQ0UscUJBQUE7RUFDQSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtFQUNBLGVBQUE7QUFDRjs7QUFFQTtFQUNFLHFCQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsU0FBQTtFQUNBLFVBQUE7RUFDQSxlQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsaUJBQUE7QUFDRjtBQUFFO0VBQ0Usa0JBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLFlBQUE7RUFDQSxVQUFBO0FBRUo7O0FBRUE7O0VBRUUsdUJBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5ub3RlLXdyYXBwZXIsXHJcbi5ub3RlLWNvbnRhaW5lciB7XHJcbiAgbWF4LXdpZHRoOiA5MjBweDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIG1hcmdpbjogMCBhdXRvO1xyXG59XHJcblxyXG4uY2xvc2UtaWNvbiB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICByaWdodDogNXB4O1xyXG4gIHRvcDogMTBweDtcclxuICB6LWluZGV4OiA1O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLnNhdmUtaWNvbiB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICByaWdodDogNDBweDtcclxuICB0b3A6IDEwcHg7XHJcbiAgei1pbmRleDogNTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi50aXRsZS1kaXYge1xyXG4gIHBhZGRpbmc6IDRweDtcclxuICBwYWRkaW5nLXRvcDogMTBweDtcclxuICBpbnB1dCB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgd2lkdGg6IDc4JTtcclxuICB9XHJcbn1cclxuXHJcbjpob3N0IDo6bmctZGVlcCAuYW5ndWxhci1lZGl0b3ItdGV4dGFyZWEsXHJcbjpob3N0IDo6bmctZGVlcCAuYW5ndWxhci1lZGl0b3ItdG9vbGJhci5uZy1zdGFyLWluc2VydGVkIHtcclxuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AAAA,SAA8CA,UAAU,QAAQ,gBAAgB;;;;;;AAUhF,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,EAAe,EAASC,WAAwB;IAAhD,OAAE,GAAFD,EAAE;IAAsB,gBAAW,GAAXC,WAAW;IAcvD,iBAAY,GAAwB;MAClCC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE,OAAO;MACfC,SAAS,EAAE,MAAM;MACjBC,WAAW,EAAE,0BAA0B;MACvCC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE,MAAM;MACbC,eAAe,EAAE,QAAQ;MACzBC,OAAO,EAAE,KAAK;MACdC,WAAW,EAAE,IAAI;MACjBC,qBAAqB,EAAE,KAAK;MAC5BC,aAAa,EAAE,CACb;QACEC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE;OACR,EACD;QACED,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE;OACR,EACD;QACED,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE,WAAW;QAClBC,GAAG,EAAE;OACN;KAEJ;EAzCsE;EAEvEC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAAS;IACP,IAAI,CAACC,IAAI,GAAG,IAAI,CAACnB,EAAE,CAACoB,KAAK,CAAC;MACxBC,EAAE,EAAE,CAAC,IAAI,CAACC,IAAI,CAACD,EAAE,EAAE,CAACxB,UAAU,CAAC0B,QAAQ,CAAC,CAAC;MACzCC,KAAK,EAAE,CAAC,IAAI,CAACF,IAAI,CAACE,KAAK,EAAE,CAAC3B,UAAU,CAAC0B,QAAQ,CAAC,CAAC;MAC/CE,WAAW,EAAE,CAAC,IAAI,CAACH,IAAI,CAACG,WAAW,EAAE,CAAC5B,UAAU,CAAC0B,QAAQ,CAAC;KAC3D,CAAC;EACJ;EA+BAG,UAAU,IAEV;EAEAC,QAAQ;IACN;IACA,IAAI,CAAC1B,WAAW,CAAC2B,UAAU,CAAC,IAAI,CAACN,IAAI,CAAC,CAACO,SAAS,CAAEC,IAAS,IAAI;MAC7D,IAAGA,IAAI,IAAIA,IAAI,CAACC,MAAM,IAAI,SAAS,IAAID,IAAI,CAACE,IAAI,IAAIF,IAAI,CAACE,IAAI,CAACA,IAAI,EAAE;QAClE;QACA;;IAEJ,CAAC,CAAC;EACJ;;AA3DWlC,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAmC;EAAAC;IAAAZ;EAAA;EAAAa;EAAAC;EAAAC;EAAAC;IAAA;MCV1BC,+BAAyB;MAGnBA,2BAAkE;MAClEA,+BAA6C;MAArBA;QAAA,OAASC,cAAU;MAAA,EAAC;MAC1CD,gCAAU;MAAAA,oBAAI;MAAAA,iBAAW;MAE3BA,+BAAgD;MAAvBA;QAAA,OAASC,gBAAY;MAAA,EAAC;MAC7CD,gCAAU;MAAAA,qBAAK;MAAAA,iBAAW;MAG9BA,qCAAmH;MAErHA,iBAAM;;;MAbFA,oCAAkB;MAW0BA,gBAA2B;MAA3BA,kGAA2B","names":["Validators","NoteComponent","constructor","fb","noteService","editable","spellcheck","height","minHeight","placeholder","translate","width","toolbarPosition","outline","showToolbar","uploadWithCredentials","customClasses","name","class","tag","ngOnInit","creteForm","form","group","id","note","required","title","description","removeNote","saveNote","updateNote","subscribe","resp","status","data","selectors","inputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\pages\\hero-page\\note\\note.component.ts","C:\\Users\\hardik\\Downloads\\login-register-notes\\src\\app\\pages\\hero-page\\note\\note.component.html"],"sourcesContent":["import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { OnInit, Component, Input } from '@angular/core';\r\nimport { AngularEditorConfig } from '@kolkov/angular-editor';\r\nimport { Note } from 'src/app/core/model/note';\r\nimport { NoteService } from 'src/app/core/services/note.service';\r\n@Component({\r\n  selector: 'app-note',\r\n  templateUrl: './note.component.html',\r\n  styleUrls: ['./note.component.scss'],\r\n})\r\nexport class NoteComponent implements OnInit {\r\n  @Input() note: Note;\r\n  form: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, public noteService: NoteService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.creteForm();\r\n  }\r\n\r\n  creteForm() {\r\n    this.form = this.fb.group({\r\n      id: [this.note.id, [Validators.required]],\r\n      title: [this.note.title, [Validators.required]],\r\n      description: [this.note.description, [Validators.required]],\r\n    });\r\n  }\r\n\r\n  editorConfig: AngularEditorConfig = {\r\n    editable: true,\r\n    spellcheck: true,\r\n    height: '15rem',\r\n    minHeight: '3rem',\r\n    placeholder: 'Enter your notes here...',\r\n    translate: 'no',\r\n    width: '100%',\r\n    toolbarPosition: 'bottom',\r\n    outline: false,\r\n    showToolbar: true,\r\n    uploadWithCredentials: false, // if needed\r\n    customClasses: [\r\n      {\r\n        name: 'quote',\r\n        class: 'quote',\r\n      },\r\n      {\r\n        name: 'redText',\r\n        class: 'redText',\r\n      },\r\n      {\r\n        name: 'titleText',\r\n        class: 'titleText',\r\n        tag: 'h1',\r\n      },\r\n    ],\r\n  };\r\n\r\n  removeNote() {\r\n\r\n  }\r\n\r\n  saveNote() {\r\n    debugger;\r\n    this.noteService.updateNote(this.note).subscribe((resp: any) => {\r\n      if(resp && resp.status == 'SUCCESS' && resp.data && resp.data.data) {\r\n        // this.note = resp.data.data;\r\n        debugger;\r\n      }\r\n    })\r\n  }\r\n}\r\n","<form [formGroup]=\"form\">\r\n  <div class=\"single-note\">\r\n    <div class=\"title-div\">\r\n      <input type=\"text\" formControlName=\"title\" placeholder=\"Title...\">\r\n      <span class=\"save-icon\" (click)=\"saveNote()\">\r\n        <mat-icon>save</mat-icon>\r\n      </span>\r\n      <span class=\"close-icon\" (click)=\"removeNote()\">\r\n        <mat-icon>close</mat-icon>\r\n      </span>\r\n    </div>\r\n    <angular-editor formControlName=\"description\" [id]=\"note?.id?.toString()\" [config]=\"editorConfig\"></angular-editor>\r\n    <span class=\"save-btn\"> </span>\r\n  </div>\r\n</form>\r\n\r\n<!-- Backup for all notes save at a time -->\r\n<!-- <angular-editor [id]=\"id\" [formControl]=\"form\" [config]=\"editorConfig\" (focusEvent)=\"showToolbar()\" (blurEvent)=\"hideToolbar()\"></angular-editor> -->\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}